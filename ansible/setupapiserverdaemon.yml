# FutureGateway fgapiserver component playbook 
#
# Author: Riccardo Bruno <riccardo.bruno@ct.infn.it>

- hosts: fgAPIServer
  remote_user: "{{ fg_connect_user }}" 
  become: yes
  become_method: sudo
  vars_files:
    - vars/fgdatabase.yml
    - vars/fgcommons.yml
    - vars/apiserverdaemon.yml
  roles:
    - {role: geerlingguy.git }
  tasks:
    - name: FGUser | Creatign FutureGateway user
      user: name="{{ fg_user }}"
            password="{{ fg_pass }}"
            comment="FutureGateway user"
            generate_ssh_key=yes
            shell=/bin/bash
    - name: FGUserpwd | Managing futuregateway password
      shell: echo "{{ fg_user }}:{{ fg_pass }}" | /usr/sbin/chpasswd 
    - name: TesterUser | Creating APIServerDaemon tester user
      user: name="{{ tester_user }}"
            password="{{ tester_pass }}"
            comment="APIServerDaemon tester user"
            shell=/bin/bash
    - name: TesterUserpwd | Managing tester user password
      shell: echo "{{ tester_user }}:{{ tester_pass }}" | /usr/sbin/chpasswd 
    # Configure ssh to allow password authentication to JobTestUser and fg_user
    - name: jobtpass | Allow password authentication to JobTestUser and fg_user
      blockinfile:
        backup: yes 
        dest: /etc/ssh/sshd_config
        regexp: ''
        insertafter: EOF
        block: |
               #jobtest allow password auth.
               Match User jobtest
               PasswordAuthentication yes
               Match User {{ fg_user }}
               PasswordAuthentication yes
      register: sshdcfg
    - name: restartssh | Restart SSH service
      service:
        name: ssh
        state: restarted
      when: sshdcfg.changed
    - name: APIServerDaemon.git | Cloning APIServerDaemon from git
      git: repo="{{ fg_APIServerDaemon_git }}"
           dest="/home/{{ fg_user }}/APIServerDaemon"
           version="{{ fg_APIServerDaemon_gitver }}"
           force=yes
    - name: Configuration | Get futuregateway configuration files
      git: repo="{{ fg_fgSetup_git }}"
           dest="/home/{{ fg_user }}/fgSetup"
           version="{{ fg_fgSetup_gitver }}"
           force=yes
    - name: rOCCIadp | JSAGA rOCCI adaptor
      git: repo="{{ fg_rOCCI_adaptor_git }}"
           dest="/home/{{ fg_user }}/jsaga-adaptor-rocci"
           version="{{ fg_rOCCI_adaptor_gitver }}"
           force=yes
    - name: GridnCloudEngine | Grid and Cloud Engine
      git: repo="{{ fg_GridnCloudEngine_git }}"
           dest="/home/{{ fg_user }}/grid-and-cloud-engine"
           version="{{ fg_GridnCloudEngine_gitver }}"
           force=yes
    - name: chown_fgAPIServerRepo | Change ownership for fgAPIServer repo to futuregateway user
      file: path="/home/{{ fg_user }}/{{ item }}" owner="{{ fg_user }}" group="{{ fg_user }}" mode=0775 recurse=yes
      with_items:
         - APIServerDaemon
         - jsaga-adaptor-rocci
         - grid-and-cloud-engine
         - fgSetup
    # Package installation: mysql client (RedHat+Deb)
    - name: ReqPackages_yum | Install required packages for RedHat
      yum: name="{{ item }}" state=latest
      with_items:
         - mariadb
         - java-1.7.0-openjdk
         - java-1.7.0-openjdk-devel
         - tomcat
         - tomcat-webapps
         - tomcat-admin-webapps
         - ruby-devel
         - git
         - openldap
         - openvpn
         - screen
         - jq
      when: ansible_os_family == "RedHat"
    - name: ReqPackages_apt | Install required packages for Debian
      apt: pkg="{{ item }}" state=latest
      with_items:
         - mysql-client
         - openjdk-7-jdk
         - tomcat7
         - tomcat7-admin
         - tomcat7-common
         - ant
         - maven
         - build-essential
         - curl
         - ruby-dev
         - libapache2-mod-wsgi
         - git
         - ldap-utils
         - openvpn
         - screen
         - jq
      when: ansible_os_family == "Debian"
      # Tomcat7 installation (RedHat+Deb)
    - name: Tomcat7 | Install Tomcat7 (RedHat+Deb)
      yum: name="{{ item }}" state=latest
      with_items:
         - tomcat
         - tomcat-webapps
         - tomcat-admin-webapps
      when: ansible_os_family == "RedHat"
    - name: ReqPackages_apt | Install required packages for Debian
      apt: pkg="{{ item }}" state=latest
      with_items:
         - tomcat7
         - tomcat7-admin
         - tomcat7-common
      when: ansible_os_family == "Debian"
    # Create lib directory in APIServerDaemon
    - name: ASDlib | APIServerDemon lib directory
      file:
        path: "/home/{{ fg_user }}/APIServerDaemon/lib" 
        state: directory
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0755
    # GridnCloud Engine
    - name: gncTPool_bld | Build the GridnCloudEngine threadpool
      become: yes
      become_user: futuregateway
      command: mvn clean install -Dmaven.compiler.source=1.6 -Dmaven.compiler.target=1.6 
      args:
        chdir: "/home/{{ fg_user }}/grid-and-cloud-engine/grid-and-cloud-engine-threadpool"
        creates: "/home/{{ fg_user }}/grid-and-cloud-engine/grid-and-cloud-engine-threadpool/target/grid-and-cloud-engine-threadpool-0.0.1-SNAPSHOT.jar"
      register: gnceng_tp
    - name: gncTPool_cpy | Copy the GridnCloudEngine threadpool jar to APIServerDaemon lib directory
      copy:
        src: "/home/{{ fg_user }}//grid-and-cloud-engine/grid-and-cloud-engine-threadpool/target/grid-and-cloud-engine-threadpool-0.0.1-SNAPSHOT.jar"
        dest: "/home/{{ fg_user }}/APIServerDaemon/lib/grid-and-cloud-engine-threadpool-0.0.1-SNAPSHOT.jar"
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0644
      when: gnceng_tp.changed
    - name: gncMain_bld | Build the GridnCloudEngine main class
      become: yes
      become_user: futuregateway
      command: mvn clean install -Dmaven.compiler.source=1.6 -Dmaven.compiler.target=1.6
      args:
        chdir: "/home/{{ fg_user }}/grid-and-cloud-engine/grid-and-cloud-engine_M"
        creates: "/home/{{ fg_user }}//grid-and-cloud-engine/grid-and-cloud-engine_M/target/grid-and-cloud-engine_M-0.0.1-SNAPSHOT.jar"
      register: gnceng_M
    - name: gncMain_cpy | Copy the GridnCloudEngine main jar to APIServerDaemon lib directory
      copy:
        src: "/home/{{ fg_user }}//grid-and-cloud-engine/grid-and-cloud-engine_M/target/grid-and-cloud-engine_M-0.0.1-SNAPSHOT.jar"
        dest: "/home/{{ fg_user }}/APIServerDaemon/lib/grid-and-cloud-engine_M-0.0.1-SNAPSHOT.jar"
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0644
      when: gnceng_M.changed
    # Build Adaptors
    # jsaga-rocci-adaptor
    - name: rocci_bld | Build jsaga-rocci-adaptor
      become: yes
      become_user: futuregateway
      command: ant all
      args:
        chdir: "/home/{{ fg_user }}/jsaga-adaptor-rocci"
        creates: "/home/{{ fg_user }}/jsaga-adaptor-rocci/dist/jsaga-adaptor-rocci.jar"
      register: rocci
    - name: rocci_cpy | Copy jsaga-rocci-adaptor jar to APIServerDaemon lib directory
      copy:
        src: "/home/{{ fg_user }}/jsaga-adaptor-rocci/dist/jsaga-adaptor-rocci.jar"
        dest: "/home/{{ fg_user }}/APIServerDaemon/lib/jsaga-adaptor-rocci.jar"
        owner: "{{ fg_user }}" 
        group: "{{ fg_user }}"
        mode: 0644
      when: rocci.changed
    # Install the GridnCloudEngine UsersTrackingDB
    - name: utDBinst0 | UsersTracking Database creation check 
      mysql_db: name=userstracking
                state=present
                login_host="{{ fg_db_host }}"
                login_port="{{ fg_db_port }}"
                login_user=root
                login_password="{{ mysql_root_password }}"
      register: db_present
    - name: utDBinst1 | UsersTracking Database creation and installation
      mysql_db: name=userstracking
                state=import
                login_host="{{ fg_db_host }}"
                login_port="{{ fg_db_port }}"
                login_user=root
                login_password="{{ mysql_root_password }}"
                target="/home/{{ fg_user }}/grid-and-cloud-engine/UsersTrackingDB/UsersTrackingDB.sql"
      when: db_present.changed
    # APIServerDaemon .properties files
    - name: log4j_prop | Configure log4j.properties file
      template:
        src: templates/asd_log4j.properties.j2
        dest: "/home/{{ fg_user }}/APIServerDaemon/web/WEB-INF/log4j.properties"
        backup: yes
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0644 
    # APIServerDaemon .properties file
    - name: asd_prop | Configure APIServerDaemon file
      template:
        src: templates/asd_APIServerDaemon.properties.j2
        dest: "/home/{{ fg_user }}/APIServerDaemon/web/WEB-INF/classes/it/infn/ct/APIServerDaemon.properties"
        backup: yes
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0644
    # Build APIServerDaemon
    - name: mkwebinflib | create APIServerDaemon web/WEB-INF/lib dir
      file:
        path: "/home/{{ fg_user }}/APIServerDaemon/web/WEB-INF/lib"
        state: directory
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0755
    - name: bld_asdwar | Build the APIServerDaemon war file
      become: yes
      become_user: futuregateway
      shell: . /home/{{ fg_user }}/.profile && ant all
      args:
        executable: /bin/bash
        chdir: "/home/{{ fg_user }}/APIServerDaemon"
        creates: "/home/{{ fg_user }}/APIServerDaemon/dist/APIServerDaemon.war"
      register: asdwar
    # Deploy APIServerDaemon war file
    - name: dplyasd | Deploy APIServerDaemon.war file
      copy:
        src: "/home/{{ fg_user }}/APIServerDaemon/dist/APIServerDaemon.war"
        dest: /var/lib/tomcat7/webapps/APIServerDaemon.war 
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0644
      when: asdwar.changed
    # OCCI cli from EGI-fedcloud
    - name: occicli | Install EGI-FedCloud OCCI cli
      shell: curl -L http://go.egi.eu/fedcloud.ui | /bin/bash -
      args:
        executable: /bin/bash
        creates: /usr/bin/occi
      register: occi
    # VOMS conf: vo.indigo-datacloud.eu (dir)
    - name: vomsconf | Confoguring vo.indigo-datacloud.eu
      file:
        dest: /etc/grid-security/vomsdir/vo.indigo-datacloud.eu
        group: "{{ fg_user }}"
        owner: "{{ fg_user }}"
        mode: 0755 
        state: directory 
    # VOMS conf: vo.indigo-datacloud.eu (lsc)
    - name: vomsconf | Confoguring vo.indigo-datacloud.eu
      copy:
        content: "{{ voms_indigo_lsc }}"
        dest: /etc/grid-security/vomsdir/vo.indigo-datacloud.eu/voms01.ncg.ingrid.pt.lsc 
        group: "{{ fg_user }}"
        owner: "{{ fg_user }}"
        mode: 644
    # VOMS conf: vo.indigo-datacloud.eu (vomses)
    - name: vomsconf | Confoguring vo.indigo-datacloud.eu
      copy:
        content: "{{ voms_indigo_vomses }}"
        dest: /etc/vomses/vo.indigo-datacloud.eu-voms01.ncg.ingrid.pt 
        group: "{{ fg_user }}"
        owner: "{{ fg_user }}"
        mode: 644
    # Environment directory 
    - name: EnvDir | Environment settings 
      file: 
        path: "/home/{{ fg_user }}/.fgprofile"
        state: directory
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0775
        recurse: yes
    # Commons environment
    - name: EnvCommon | FutureGateway commons environment settings
      copy: src="/home/{{ fg_user }}/fgSetup/setup_commons.sh"
            dest="/home/{{ fg_user }}/.fgprofile/commons"
            owner="{{ fg_user }}"
            group="{{ fg_user }}"
            mode=0644
    # Load main environment settings
    - name: EnvFGDB | FGDB environment setting loader
      copy: content="{{ fg_fgdb }}"
            dest="/home/{{ fg_user }}/.fgprofile/fgdb"
            owner="{{ fg_user }}"
            group="{{ fg_user }}"
            mode=0644
    - name: EnvFGAPIServer | fgAPIServer environment setting loader
      copy: content="{{ fg_apiserverdaemon }}"
            dest="/home/{{ fg_user }}/.fgprofile/apiserverdaemon"
            owner="{{ fg_user }}"
            group="{{ fg_user }}"
            mode=0644
    # Load FutureGateway profile components in bash_profile file
    - name: EnvProfile | Insert load profile line in .profile file
      blockinfile: block="for f in $(find $HOME/.fgprofile -type f); do source $f; done {{ '#' }} FGLOADENV"
                   create=yes
                   dest="/home/{{ fg_user }}/.profile"
                   owner="{{ fg_user }}"
                   group="{{ fg_user }}"
                   mode=0644
