# FutureGateway fgapiserver component playbook 
#
# Author: Riccardo Bruno <riccardo.bruno@ct.infn.it>

- hosts: fgAPIServer
  remote_user: "{{ fg_connect_user }}" 
  become: yes
  become_method: sudo
  vars_files:
    - vars/fgdatabase.yml
    - vars/fgcommons.yml
    - vars/apiserverdaemon.yml
  roles:
    - {role: geerlingguy.git }
  tasks:
    - name: FGUser | Creatign FutureGateway user
      user: name="{{ fg_user }}"
            password="{{ fg_pass }}"
            comment="FutureGateway user"
            generate_ssh_key=yes
    - name: JobTestUser | Creating SSH job test user
      user: name=jobtest
            password="{{ lookup('password', '/tmp/.jobtest.pwd') }}"
            comment="JobTester user"
    - name: APIServerDaemon.git | Cloning APIServerDaemon from git
      git: repo="{{ fg_APIServerDaemon_git }}"
           dest="/home/{{ fg_user }}/APIServerDaemon"
           version="{{ fg_APIServerDaemon_gitver }}"
           force=yes
    - name: Configuration | Get futuregateway configuration files
      git: repo="{{ fg_fgSetup_git }}"
           dest="/home/{{ fg_user }}/fgSetup"
           version="{{ fg_fgSetup_gitver }}"
           force=yes
    - name: rOCCIadp | JSAGA rOCCI adaptor
      git: repo="{{ fg_rOCCI_adaptor_git }}"
           dest="/home/{{ fg_user }}/jsaga-adaptor-rocci"
           version="{{ fg_rOCCI_adaptor_gitver }}"
           force=yes
    - name: GridnCloudEngine | Grid and Cloud Engine
      git: repo="{{ fg_GridnCloudEngine_git }}"
           dest="/home/{{ fg_user }}/grid-and-cloud-engine"
           version="{{ fg_GridnCloudEngine_gitver }}"
           force=yes
    - name: chown_fgAPIServerRepo | Change ownership for fgAPIServer repo to futuregateway user
      file: path="/home/{{ fg_user }}/{{ item }}" owner="{{ fg_user }}" group="{{ fg_user }}" mode=0775 recurse=yes
      with_items:
         - APIServerDaemon
         - jsaga-adaptor-rocci
         - grid-and-cloud-engine
         - fgSetup
    # Package installation: mysql client (RedHat+Deb)
    - name: ReqPackages_yum | Install required packages for RedHat
      yum: name="{{ item }}" state=latest
      with_items:
         - mariadb
         - java-1.7.0-openjdk
         - java-1.7.0-openjdk-devel
         - tomcat
         - tomcat-webapps
         - tomcat-admin-webapps
         - ruby-devel
         - git
         - openldap
         - openvpn
         - screen
         - jq
      when: ansible_os_family == "RedHat"
    - name: ReqPackages_apt | Install required packages for Debian
      apt: pkg="{{ item }}" state=latest
      with_items:
         - mysql-client
         - openjdk-7-jdk
         - tomcat7
         - tomcat7-admin
         - tomcat7-common
         - ant
         - maven
         - build-essential
         - curl
         - ruby-dev
         - libapache2-mod-wsgi
         - git
         - ldap-utils
         - openvpn
         - screen
         - jq
      when: ansible_os_family == "Debian"
      # Tomcat7 installation (RedHat+Deb)
    - name: Tomcat7 | Install Tomcat7 (RedHat+Deb)
      yum: name="{{ item }}" state=latest
      with_items:
         - tomcat
         - tomcat-webapps
         - tomcat-admin-webapps
      when: ansible_os_family == "RedHat"
    - name: ReqPackages_apt | Install required packages for Debian
      apt: pkg="{{ item }}" state=latest
      with_items:
         - tomcat7
         - tomcat7-admin
         - tomcat7-common
      when: ansible_os_family == "Debian"
    # Create lib directory in APIServerDaemon
    - name: ASDlib | APIServerDemon lib directory
      file:
        path: "/home/{{ fg_user }}/APIServerDaemon/lib" 
        state: directory
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0755
    # EGI occi-cli
    # GridnCloud Engine
    - name: gncTPool_bld | Build the GridnCloudEngine threadpool
      become: yes
      become_user: futuregateway
      command: mvn clean install -Dmaven.compiler.source=1.6 -Dmaven.compiler.target=1.6 
      args:
        chdir: "/home/{{ fg_user }}/grid-and-cloud-engine/grid-and-cloud-engine-threadpool"
        creates: "/home/{{ fg_user }}/grid-and-cloud-engine/grid-and-cloud-engine-threadpool/target/grid-and-cloud-engine-threadpool-0.0.1-SNAPSHOT.jar"
    - name: gncTPool_cpy | Copy the GridnCloudEngine threadpool jar to APIServerDaemon lib directory
      copy:
        src: "/home/{{ fg_user }}//grid-and-cloud-engine/grid-and-cloud-engine-threadpool/target/grid-and-cloud-engine-threadpool-0.0.1-SNAPSHOT.jar"
        dest: "/home/{{ fg_user }}/APIServerDaemon/lib/grid-and-cloud-engine-threadpool-0.0.1-SNAPSHOT.jar"
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0644
    - name: gncMain_bld | Build the GridnCloudEngine main class
      become: yes
      become_user: futuregateway
      command: mvn clean install -Dmaven.compiler.source=1.6 -Dmaven.compiler.target=1.6
      args:
        chdir: "/home/{{ fg_user }}/grid-and-cloud-engine/grid-and-cloud-engine_M"
        creates: "/home/{{ fg_user }}//grid-and-cloud-engine/grid-and-cloud-engine_M/target/grid-and-cloud-engine_M-0.0.1-SNAPSHOT.jar"
    - name: gncMain_cpy | Copy the GridnCloudEngine main jar to APIServerDaemon lib directory
      copy:
        src: "/home/{{ fg_user }}//grid-and-cloud-engine/grid-and-cloud-engine_M/target/grid-and-cloud-engine_M-0.0.1-SNAPSHOT.jar"
        dest: "/home/{{ fg_user }}/APIServerDaemon/lib/grid-and-cloud-engine_M-0.0.1-SNAPSHOT.jar"
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0644
    # Build Adaptors
    # jsaga-rocci-adaptor
    - name: rocci_bld | Build jsaga-rocci-adaptor
      become: yes
      become_user: futuregateway
      command: ant all
      args:
        chdir: "/home/{{ fg_user }}/jsaga-adaptor-rocci"
        creates: "/home/{{ fg_user }}/jsaga-adaptor-rocci/dist/jsaga-adaptor-rocci.jar"
    - name: rocci_cpy | Copy jsaga-rocci-adaptor jar to APIServerDaemon lib directory
      copy:
        src: "/home/{{ fg_user }}/jsaga-adaptor-rocci/dist/jsaga-adaptor-rocci.jar"
        dest: "/home/{{ fg_user }}/APIServerDaemon/lib/jsaga-adaptor-rocci.jar"
        owner: "{{ fg_user }}" 
        group: "{{ fg_user }}"
        mode: 0644
    # Build APIServerDaemon
    - name: commons-logging | Download commons-loggin into /tmp 
      become: yes
      become_user: futuregateway
      unarchive:
        src: http://archive.apache.org/dist/commons/logging/binaries/commons-logging-1.1.1-bin.zip
        dest: /tmp
        remote_src: True
    - name: cp_commons-logging | Copy commons-logging to APIServer lib directory
      copy:
        src: /tmp/commons-logging-1.1.1/commons-logging-1.1.1.jar
        dest: /home/{{ fg_user }}/APIServerDaemon/lib/commons-logging-1.1.1.jar
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0644
    - name: skipivyxml | Add skip commons-logging in APIServerDaemon build ivy.xml file
      lineinfile:
        name: /home/{{ fg_user }}/APIServerDaemon/ivy.xml 
        insertbefore: '</dependencies>'
        line: '                <exclude org="commons-logging"/>'
    - name: mkwebinflib | create APIServerDaemon web/WEB-INF/lib dir
      file:
        path: "/home/{{ fg_user }}/APIServerDaemon/web/WEB-INF/lib"
        state: directory
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0755
    - name: bld_asdwar | Build the APIServerDaemon war file
      become: yes
      become_user: futuregateway
      command: ant all 
      args:
        chdir: "/home/{{ fg_user }}/APIServerDaemon"
        creates: "/home/{{ fg_user }}/APIServerDaemon/dist/APIServerDaemon.war"
    # Environment directory 
    - name: EnvDir | Environment settings 
      file: 
        path: "/home/{{ fg_user }}/.fgprofile"
        state: directory
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0775
        recurse: yes
    # Commons environment
    - name: EnvCommon | FutureGateway commons environment settings
      copy: src="/home/{{ fg_user }}/fgSetup/setup_commons.sh"
            dest="/home/{{ fg_user }}/.fgprofile/commons"
            owner="{{ fg_user }}"
            group="{{ fg_user }}"
            mode=0644
    # Load main environment settings
    - name: EnvFGDB | FGDB environment setting loader
      copy: content="{{ fg_fgdb }}"
            dest="/home/{{ fg_user }}/.fgprofile/fgdb"
            owner="{{ fg_user }}"
            group="{{ fg_user }}"
            mode=0644
    - name: EnvFGAPIServer | fgAPIServer environment setting loader
      copy: content="{{ fg_apiserverdaemon }}"
            dest="/home/{{ fg_user }}/.fgprofile/apiserverdaemon"
            owner="{{ fg_user }}"
            group="{{ fg_user }}"
            mode=0644
    # Load FutureGateway profile components in bash_profile file
    - name: EnvProfile | Insert load profile line in .profile file
      blockinfile: block="for f in $(find $HOME/.fgprofile -type f); do source $f; done {{ '#' }} FGLOADENV"
                   create=yes
                   dest="/home/{{ fg_user }}/.profile"
                   owner="{{ fg_user }}"
                   group="{{ fg_user }}"
                   mode=0644
